var searchIndex = JSON.parse('{\
"c19":{"doc":"The C19 ProtocolA variant of the Gossip protocol that …","i":[[0,"agent","c19","The Agent layer.",null,null],[0,"default","c19::agent","Default implementation of the Agent trait.",null,null],[6,"Result","c19::agent::default","",null,null],[3,"Default","","The Default struct.",null,null],[12,"port","","Binds and accepts connections on this port. Default port: …",0,null],[5,"get_handler","","Returns the value associated with the given key.",null,[[["arc",3],["request",3],["state",8]],[["response",3],["body",3]]]],[5,"set_handler","","Sets the key and value specified in the request.",null,[[["request",3],["arc",3],["body",3],["state",8]]]],[5,"handler","","Accepts a request and dynamically dispatches the handler …",null,[[["request",3],["arc",3],["body",3],["state",8]]]],[11,"server","","",0,[[["arc",3],["state",8]]]],[7,"__init215733339167654759","","",null,null],[8,"Agent","c19::agent","The Agent trait.",null,null],[10,"start","","",1,[[["arc",3],["state",8]],[["result",4],["boxfuture",6]]]],[17,"_Agent_registry","","",null,null],[0,"connection","c19","The Connection layer.",null,null],[0,"default","c19::connection","The default connection layer implementation",null,null],[6,"Result","c19::connection::default","",null,null],[3,"Default","","",null,null],[12,"port","","The port to bind to and listen for connection from other …",2,null],[12,"target_port","","An optional port to use as a target when sending the …",2,null],[12,"push_interval","","The publish interval in milliseconds. Default value is 1 …",2,null],[12,"pull_interval","","The pull interval in milliseconds. Default value is 60 …",2,null],[12,"r0","","The number of peers to connect to on each interval and …",2,null],[12,"timeout","","The connection timeout when connecting and exchanging …",2,null],[12,"peer_provider","","The peer provider to use.",2,null],[5,"get_handler","","Returns an HTTP response with the full state as JSON.",null,[[["arc",3],["request",3],["state",8]],[["response",3],["body",3]]]],[5,"set_handler","","Accepts a JSON body that represents a state. Merges it …",null,[[["request",3],["arc",3],["body",3],["state",8]]]],[5,"handler","","",null,[[["request",3],["arc",3],["body",3],["state",8]]]],[11,"server","","",2,[[["arc",3],["state",8]]]],[11,"receiver","","Receiver thread. Connects to <code>r0</code> peers at random and pulls …",2,[[["arc",3],["state",8]]]],[11,"publisher","","Publisher thread. Publishes the state at an <code>interval</code> time.",2,[[["arc",3],["state",8]]]],[7,"__init8791889224756635807","","",null,null],[0,"peer_provider","c19::connection","Peer provider.",null,null],[0,"k8s","c19::connection::peer_provider","An implementation of the peer provider.",null,null],[6,"Result","c19::connection::peer_provider::k8s","",null,null],[3,"K8s","","",null,null],[12,"selector","","Label selector to query for pods. This is loaded from the …",3,null],[12,"namespace","","The namespace to scope the query. Default value is the …",3,null],[12,"peers","","Holds the updated list of peer endpoints.",3,null],[11,"selector","","Returns the selector as a formated string to match the …",3,[[],["string",3]]],[11,"ip","","Returns the IP of the specified pod.",3,[[["pod",3]],[["peer",4],["option",4]]]],[7,"__init12866312320927563797","","",null,null],[0,"static_peer_provider","c19::connection::peer_provider","An implementation of the peer provider.",null,null],[6,"Result","c19::connection::peer_provider::static_peer_provider","",null,null],[3,"Static","","",null,null],[12,"peers","","",4,null],[7,"__init12413351416112940404","","",null,null],[4,"Peer","c19::connection::peer_provider","",null,null],[13,"Ipv4Addr","","",5,null],[13,"SocketAddrV4","","",5,null],[8,"PeerProvider","","",null,null],[10,"init","","Initializes the peer provider.",6,[[],[["result",4],["box",3]]]],[10,"get","","Returns a vector of available peers.",6,[[],[["vec",3],["peer",4]]]],[17,"_PeerProvider_registry","","",null,null],[11,"ip","","",5,[[],["ipv4addr",3]]],[11,"port","","",5,[[],["option",4]]],[8,"Connection","c19::connection","The Connection Trait.",null,null],[10,"start","","",7,[[["arc",3],["state",8]],[["result",4],["boxfuture",6]]]],[17,"_Connection_registry","","",null,null],[0,"helpers","c19","A collection of helpful functions.",null,null],[0,"http","c19::helpers","A collection of HTTP helper functions.",null,null],[0,"responses","c19::helpers::http","",null,null],[3,"Responses","c19::helpers::http::responses","",null,null],[11,"response","","",8,[[["body",3],["statuscode",3]],[["response",3],["body",3]]]],[11,"ok","","",8,[[["body",3]],[["response",3],["body",3]]]],[11,"not_found","","",8,[[["option",4],["body",3]],[["response",3],["body",3]]]],[11,"bad_request","","",8,[[["option",4],["body",3]],[["response",3],["body",3]]]],[11,"no_content","","",8,[[],[["response",3],["body",3]]]],[11,"unprocessable","","",8,[[["option",4],["body",3]],[["response",3],["body",3]]]],[11,"internal_error","","",8,[[["option",4],["body",3]],[["response",3],["body",3]]]],[0,"middlewares","c19::helpers","A collection of middlewares to be used with Hyper HTTP …",null,null],[0,"json","c19::helpers::middlewares","",null,null],[6,"Result","c19::helpers::middlewares::json","",null,null],[5,"wrap_json_response","","",null,[[]]],[0,"utils","c19::helpers","A collection of helpful utility functions.",null,null],[5,"epoch","c19::helpers::utils","Returns the current time in seconds since epoch.",null,[[]]],[8,"Sample","","A trait to be implemented on iterators to allow …",null,null],[16,"Item","","",9,null],[10,"sample","","Returns a sample of <code>n</code> elements from the collection.",9,[[],["vec",3]]],[0,"state","c19","The State layer.",null,null],[0,"default","c19::state","The default implementation of the State layer.",null,null],[17,"MAX_SET_OPS","c19::state::default","The maximum number of pending async set operations.",null,null],[3,"Version","","Version information.",null,null],[12,"ts","","",10,null],[12,"storage","","",10,null],[3,"Default","","The default state struct.",null,null],[12,"ttl","","The default TTL (in milliseconds) to use if none is …",11,null],[12,"purge_interval","","The interval in milliseconds in which to purge expired …",11,null],[12,"data_seeder","","The [DataSeeder] to use for seeding the data on …",11,null],[12,"version","","The version of the current state.",11,null],[12,"tx","","The SyncSender channel to use for async set operations",11,null],[12,"storage","","The data storage in the form of a Key/Value hashmap.",11,null],[12,"is_dirty","","Calculating the version is a bit expensive so we use  the …",11,null],[11,"set","","Merges the two maps while resolving conflicts.",11,[[["hashmap",3]]]],[11,"purge","","Purges expired keys.",11,[[]]],[11,"seed","","Seeds the state with the data from the DataSeeder.",11,[[["rwlock",3],["arc",3]],[["box",3],["result",4]]]],[5,"hash","","",null,[[["hashmap",3]]]],[3,"Value","","An implementation of the StateValue trait.",null,null],[12,"value","","A serde_json::Value to hold any value that can be …",12,null],[12,"ts","","The timestamp when this value was first created.",12,null],[12,"ttl","","An optional TTL (resolved to an absolute epoch time) when …",12,null],[11,"is_expired","","Returns true if the value was expired.",12,[[]]],[7,"__init5504723193248535467","","",null,null],[5,"purge","","Purges expired keys at a specficied interval.",null,[[["arc",3],["default",3]]]],[5,"async_set","","Async set thread.",null,[[["vec",3],["arc",3],["default",3],["receiver",3]]]],[0,"data_seeder","c19::state","",null,null],[0,"file","c19::state::data_seeder","",null,null],[6,"Result","c19::state::data_seeder::file","",null,null],[3,"File","","",null,null],[12,"filename","","",13,null],[7,"__init9602899962630220401","","",null,null],[8,"DataSeeder","c19::state::data_seeder","",null,null],[10,"load","","",14,[[],[["result",4],["box",3],["box",3]]]],[17,"_DataSeeder_registry","","",null,null],[6,"SafeState","c19::state","An atomic reference to a state.",null,null],[8,"StateValue","","A trait used as a protocol between different components …",null,null],[10,"as_bytes","","",15,[[],[["vec",3],["option",4]]]],[8,"State","","The State trait.",null,null],[10,"init","","Initializes the state and returns a state that is safe to …",16,[[],[["state",8],["arc",3]]]],[10,"version","","Returns the version of the current state.",16,[[],["string",3]]],[10,"set","","Sets a value to the state.",16,[[["statevalue",8]],[["box",3],["result",4]]]],[10,"get","","Gets the value associated with the specified key.",16,[[["statevalue",8]],[["box",3],["option",4]]]],[11,"get_or","","Returns the value associated with the specified key or …",16,[[["box",3],["statevalue",8],["statevalue",8]],[["box",3],["statevalue",8]]]],[10,"diff","","Returns the difference between this and the <code>other</code> state.",16,[[["statevalue",8]],[["result",4],["box",3],["box",3]]]],[10,"get_root","","Returns the whole state as a StateValue.",16,[[],[["box",3],["option",4]]]],[17,"_State_registry","","",null,null],[8,"CloneState","","",null,null],[10,"clone_state","","",17,[[],[["box",3],["state",8]]]],[0,"config","c19","The C19 configuration.",null,null],[17,"DEFAULT_CONFIG_FILE","c19::config","",null,null],[3,"Config","","",null,null],[12,"version","","",18,null],[12,"spec","","",18,null],[3,"Spec","","",null,null],[12,"agent","","",19,null],[12,"state","","",19,null],[12,"connection","","",19,null],[5,"new","","Returns the configuration after dynanmically loading all …",null,[[["argmatches",3]],[["config",3],["result",4],["box",3]]]],[5,"run","c19","Initializes the state and runs the connection and agent …",null,[[["config",3]]]],[11,"from","c19::agent::default","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"erased_serialize","","",0,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","c19::connection::default","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"erased_serialize","","",2,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","c19::connection::peer_provider::k8s","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","c19::connection::peer_provider::static_peer_provider","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"erased_serialize","","",4,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","c19::connection::peer_provider","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"erased_serialize","","",5,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","c19::helpers::http::responses","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","c19::state::default","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"erased_serialize","","",11,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"erased_serialize","","",12,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","c19::state::data_seeder::file","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"erased_serialize","","",13,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","c19::config","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"erased_serialize","","",18,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"erased_serialize","","",19,[[["serializer",8]],[["ok",3],["result",4],["error",3]]]],[11,"as_bytes","c19::state::default","",12,[[],[["vec",3],["option",4]]]],[11,"start","c19::agent::default","Starts the server while passing the current state to be …",0,[[["arc",3],["state",8]],[["boxfuture",6],["result",4]]]],[11,"init","c19::connection::peer_provider::k8s","Initializes the peer provider.",3,[[],[["box",3],["result",4]]]],[11,"get","","Returns the vector of peers.",3,[[],[["vec",3],["peer",4]]]],[11,"init","c19::connection::peer_provider::static_peer_provider","",4,[[],[["box",3],["result",4]]]],[11,"get","","",4,[[],[["vec",3],["peer",4]]]],[11,"start","c19::connection::default","Starts the connection layer.",2,[[["arc",3],["state",8]],[["boxfuture",6],["result",4]]]],[11,"load","c19::state::data_seeder::file","",13,[[],[["box",3],["box",3],["result",4]]]],[11,"init","c19::state::default","Initializes the state.",11,[[],[["state",8],["arc",3]]]],[11,"version","","Returns the current state version.",11,[[],["string",3]]],[11,"set","","Sets a new value to the state.",11,[[["statevalue",8]],[["box",3],["result",4]]]],[11,"get","","Returns the value associated with the specified key.",11,[[["statevalue",8]],[["box",3],["option",4]]]],[11,"get_root","","Returns the whole state (root).",11,[[],[["box",3],["option",4]]]],[11,"diff","","Returns the difference between the current state and <code>other</code>…",11,[[["statevalue",8]],[["result",4],["box",3],["box",3]]]],[11,"clone","c19::connection::peer_provider","",5,[[],["peer",4]]],[11,"clone","c19::state::default","",10,[[],["version",3]]],[11,"clone","","",11,[[],["default",3]]],[11,"clone","","",12,[[],["value",3]]],[11,"default","c19::agent::default","",0,[[]]],[11,"default","c19::connection::default","",2,[[]]],[11,"default","c19::connection::peer_provider::k8s","",3,[[]]],[11,"default","c19::state::default","",11,[[]]],[11,"fmt","c19::agent::default","",0,[[["formatter",3]],["result",6]]],[11,"fmt","c19::connection::default","",2,[[["formatter",3]],["result",6]]],[11,"fmt","c19::connection::peer_provider::k8s","",3,[[["formatter",3]],["result",6]]],[11,"fmt","c19::connection::peer_provider::static_peer_provider","",4,[[["formatter",3]],["result",6]]],[11,"fmt","c19::connection::peer_provider","",5,[[["formatter",3]],["result",6]]],[11,"fmt","c19::state::default","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","c19::state::data_seeder::file","",13,[[["formatter",3]],["result",6]]],[11,"fmt","c19::config","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"hash","c19::state::default","",11,[[]]],[11,"from_str","c19::connection::peer_provider","",5,[[],["result",4]]],[11,"serialize","c19::agent::default","",0,[[],["result",4]]],[11,"serialize","c19::agent","",1,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","c19::connection::default","",2,[[],["result",4]]],[11,"serialize","c19::connection::peer_provider::k8s","",3,[[],["result",4]]],[11,"serialize","c19::connection::peer_provider::static_peer_provider","",4,[[],["result",4]]],[11,"serialize","c19::connection::peer_provider","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","c19::connection","",7,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","c19::state::default","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","c19::state::data_seeder::file","",13,[[],["result",4]]],[11,"serialize","c19::state::data_seeder","",14,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","c19::state","",16,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","c19::config","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"deserialize","c19::agent::default","",0,[[],["result",4]]],[11,"deserialize","c19::connection::default","",2,[[],["result",4]]],[11,"deserialize","c19::connection::peer_provider::k8s","",3,[[],["result",4]]],[11,"deserialize","c19::connection::peer_provider::static_peer_provider","",4,[[],["result",4]]],[11,"deserialize","c19::connection::peer_provider","",5,[[],["result",4]]],[11,"deserialize","c19::state::default","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","c19::state::data_seeder::file","",13,[[],["result",4]]],[11,"deserialize","c19::config","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]]],"p":[[3,"Default"],[8,"Agent"],[3,"Default"],[3,"K8s"],[3,"Static"],[4,"Peer"],[8,"PeerProvider"],[8,"Connection"],[3,"Responses"],[8,"Sample"],[3,"Version"],[3,"Default"],[3,"Value"],[3,"File"],[8,"DataSeeder"],[8,"StateValue"],[8,"State"],[8,"CloneState"],[3,"Config"],[3,"Spec"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);